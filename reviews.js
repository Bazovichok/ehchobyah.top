// reviews.js (–æ–±–Ω–æ–≤–ª—ë–Ω ‚Äî lightbox + –∫–∞—Ä—Ç–æ—á–∫–∏ + –ø–∞–≥–∏–Ω–∞—Ü–∏—è + —Ç–µ–≥–∏ + –≤–æ–∑–≤—Ä–∞—Ç –±–ª—é—Ä–∞)

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PER_PAGE = 40;
const CLOUDINARY_URL = 'https://api.cloudinary.com/v1_1/dp0smiea6/auto/upload';
const UPLOAD_PRESET = 'reviews_unsigned';

let ALL_REVIEWS = []; // –≤—Å–µ –æ—Ç–∑—ã–≤—ã (—Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ)
let currentPage = 1;

// –í–∫–ª—é—á–∞–µ–º/–≤—ã–∫–ª—é—á–∞–µ–º —Ñ–æ–Ω. 
document.getElementById('toggle_music').addEventListener('click', function() {
    const music = document.getElementById('background_music');
    if (music.paused) {
        music.play();
        this.textContent = '‚ô´';
    } else {
        music.pause();
        this.textContent = 'üîá';
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function escapeHtml(s) {
    return String(s || '').replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;').replace(/'/g,'&#039;');
}

function formatDisplayDate(maybeTimestamp) {
    if (!maybeTimestamp) return 'Date not available';
    if (maybeTimestamp.toDate) {
        return maybeTimestamp.toDate().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
    }
    return String(maybeTimestamp);
}

function linkifyTags(text) {
    const safe = escapeHtml(text || '');
    return safe.replace(/@(\d{2}\.\d{2}\.\d{4},\s\d{2}:\d{2}:\d{2})/g,
        (m, p1) => `<a href="#" class="tag-link" data-target="${p1}">@${p1}</a>`);
}

// –°–æ–∑–¥–∞—Ç—å DOM-—É–∑–µ–ª –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–∑—ã–≤–∞
function createReviewNode(review, globalIndex) {
    const card = document.createElement('div');
    card.className = 'review-card';
    card.dataset.index = String(globalIndex);
    // –¥–∞—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const displayDate = formatDisplayDate(review.date);
    card.dataset.date = displayDate;

    // header-block (–Ω–∏–∫ + –¥–∞—Ç–∞)
    const header = document.createElement('div');
    header.className = 'header-block';

    const nickSpan = document.createElement('span');
    nickSpan.className = 'nickname';
    nickSpan.textContent = review.nickname || 'Anonymous';
    header.appendChild(nickSpan);

    const dash = document.createTextNode(' - ');
    header.appendChild(dash);

    const dateSpan = document.createElement('span');
    dateSpan.className = 'datetime';
    dateSpan.textContent = displayDate;
    header.appendChild(dateSpan);

    // –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ header –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥ –≤ –±—É—Ñ–µ—Ä (–∫–∞–∫ –æ–ø—Ü–∏—è)
    header.addEventListener('click', () => {
        try {
            navigator.clipboard.writeText(`@${displayDate}`);
        } catch(e) { /* ignore */ }
    });

    // content-block (—Ç–µ–∫—Å—Ç)
    const content = document.createElement('div');
    content.className = 'content-block';
    content.innerHTML = linkifyTags(review.reviewText || '');

    // media
    const mediaContainer = document.createElement('div');
    mediaContainer.className = 'media-container';

    // –∏–∑–≤–ª–µ—á—ë–º URL'—ã (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ mediaUrls –∏ mediaUrl)
    let urls = [];
    if (Array.isArray(review.mediaUrls) && review.mediaUrls.length) urls = review.mediaUrls.slice(0,2);
    else if (review.mediaUrl) urls = [review.mediaUrl];

    // –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–Ω–∞—á–∞–ª–∞, –∞—É–¥–∏–æ –ø–æ–∑–∂–µ
    const images = urls.filter(u => /(\.jpe?g|\.png|\.gif)/i.test(u));
    const audios = urls.filter(u => /\.mp3(\?.*)?$/i.test(u) || /audio/i.test(u));

    images.forEach((u, idx) => {
        const img = document.createElement('img');
        img.src = u;
        img.classList.add('blurred');
        img.dataset.isBlurred = 'true';
        img.dataset.src = u;
        img.style.maxWidth = '200px';
        img.style.maxHeight = '200px';

        // –ø—Ä–∏ –∫–ª–∏–∫–µ: –µ—Å–ª–∏ –±–ª—é—Ä ‚Äî —É–±—Ä–∞—Ç—å –±–ª—é—Ä –∏ –æ—Ç–∫—Ä—ã—Ç—å lightbox; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—É—Ç—å –±–ª—é—Ä
        img.addEventListener('click', () => {
            const isBlurred = img.dataset.isBlurred === 'true';
            if (isBlurred) {
                // —É–±–∏—Ä–∞–µ–º –±–ª—é—Ä
                img.classList.remove('blurred');
                img.dataset.isBlurred = 'false';
                // –æ—Ç–∫—Ä—ã–≤–∞–µ–º lightbox (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π overlay) –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è
                openLightbox(img.src, img);
            } else {
                // –≤–µ—Ä–Ω—É—Ç—å –±–ª—é—Ä (–∏ –∑–∞–∫—Ä—ã—Ç—å –ª—é–±–æ–π —Å–≤–µ—Ç–æ–≤–æ–π –æ–≤–µ—Ä–ª–µ–π, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç)
                img.classList.add('blurred');
                img.dataset.isBlurred = 'true';
                closeLightboxIfMatching(img);
            }
        });

        mediaContainer.appendChild(img);
    });

    audios.forEach(u => {
        const audio = document.createElement('audio');
        audio.controls = true;
        audio.src = u;
        mediaContainer.appendChild(audio);
    });

    // —Å–±–æ—Ä–∫–∞
    card.appendChild(header);
    card.appendChild(content);
    if (urls.length) card.appendChild(mediaContainer);

    return card;
}

// –†–µ–Ω–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function renderPage(page) {
    const list = document.getElementById('reviews-list');
    list.innerHTML = '';

    const total = ALL_REVIEWS.length;
    const totalPages = Math.max(1, Math.ceil(total / PER_PAGE));
    currentPage = Math.min(Math.max(page, 1), totalPages);

    const start = (currentPage - 1) * PER_PAGE;
    const end = Math.min(start + PER_PAGE, total);

    const pageReviews = ALL_REVIEWS.slice(start, end); // —Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ

    pageReviews.forEach((r, idx) => {
        const node = createReviewNode(r, start + idx);
        list.appendChild(node);
    });

    document.getElementById('page-number').textContent = String(currentPage);
    document.getElementById('prev-page').disabled = currentPage <= 1;
    document.getElementById('next-page').disabled = currentPage >= totalPages;
}

// –ü–∞–≥–∏–Ω–∞—Ü–∏—è
document.getElementById('prev-page').addEventListener('click', () => {
    if (currentPage > 1) { currentPage--; renderPage(currentPage); }
});
document.getElementById('next-page').addEventListener('click', () => {
    const totalPages = Math.max(1, Math.ceil(ALL_REVIEWS.length / PER_PAGE));
    if (currentPage < totalPages) { currentPage++; renderPage(currentPage); }
});

// Lightbox: –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–≤–µ—Ä–ª–µ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –ø—Ä–∏ –∫–ª–∏–∫–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª—é—Ä
function openLightbox(src, originatingImg) {
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å lightbox ‚Äî —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π (–∏ –≤–µ—Ä–Ω—ë–º –±–ª—é—Ä —É —Å—Ç–∞—Ä–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞)
    closeLightbox();

    const overlay = document.createElement('div');
    overlay.id = 'image-lightbox';
    overlay.addEventListener('click', () => {
        // –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–ª—é—Ä —É –∫–∞—Ä—Ç–∏–Ω–∫–∏-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ DOM)
        if (originatingImg && originatingImg instanceof HTMLElement) {
            originatingImg.classList.add('blurred');
            originatingImg.dataset.isBlurred = 'true';
        }
        closeLightbox();
    });

    const img = document.createElement('img');
    img.src = src;
    img.alt = '';
    // –∫–ª–∏–∫ –ø–æ —Å–∞–º–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ —Ç–∞–∫–∂–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç (–∏ –±–ª—é—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è)
    img.addEventListener('click', (e) => {
        e.stopPropagation(); // —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ –¥–≤–∞–∂–¥—ã
        if (originatingImg && originatingImg instanceof HTMLElement) {
            originatingImg.classList.add('blurred');
            originatingImg.dataset.isBlurred = 'true';
        }
        closeLightbox();
    });

    overlay.appendChild(img);
    document.body.appendChild(overlay);
}

function closeLightbox() {
    const existing = document.getElementById('image-lightbox');
    if (existing) existing.remove();
}

function closeLightboxIfMatching(imgEl) {
    const lb = document.getElementById('image-lightbox');
    if (!lb) return;
    const lbImg = lb.querySelector('img');
    if (lbImg && lbImg.src === imgEl.src) {
        closeLightbox();
    }
}

// –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–µ–≥–∞–º @DD.MM.YYYY, HH:MM:SS
document.addEventListener('click', (e) => {
    const target = e.target;
    if (target && target.classList && target.classList.contains('tag-link')) {
        e.preventDefault();
        const wantedDate = target.dataset.target;

        // –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å –≤ ALL_REVIEWS
        let foundIndex = -1;
        for (let i = 0; i < ALL_REVIEWS.length; i++) {
            const disp = formatDisplayDate(ALL_REVIEWS[i].date);
            if (disp === wantedDate) { foundIndex = i; break; }
        }
        if (foundIndex === -1) { alert('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª—ë–Ω).'); return; }

        const page = Math.floor(foundIndex / PER_PAGE) + 1;
        currentPage = page;
        renderPage(page);

        // –ü–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ DOM –æ—Ç—Ä–∏—Å—É–µ—Ç, –∑–∞—Ç–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –∫ –Ω—É–∂–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
        setTimeout(() => {
            const list = document.getElementById('reviews-list');
            const nodes = list.querySelectorAll('.review-card');
            let targetNode = null;
            nodes.forEach(n => { if (n.dataset.date === wantedDate) targetNode = n; });
            if (targetNode) {
                targetNode.scrollIntoView({ behavior: 'smooth', block: 'center' });
                targetNode.classList.add('highlight');
                setTimeout(() => targetNode.classList.remove('highlight'), 1100);
            }
        }, 120);
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã: –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ 2 —Ñ–∞–π–ª–æ–≤ –∏ –∑–∞–ø–∏—Å—å –≤ Firestore
document.getElementById('review-form').addEventListener('submit', function(e) {
    e.preventDefault();
    const nickname = document.getElementById('nickname').value.trim();
    const reviewText = document.getElementById('review-text').value.trim();
    const files = Array.from(document.getElementById('review-media').files || []).slice(0, 2);

    if (!nickname || !reviewText) { alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ç–µ–∫—Å—Ç.'); return; }
    if (nickname.length > 30) { alert('–ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å 30).'); return; }
    if (reviewText.length > 250) { alert('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å 250).'); return; }
    if (files.length > 2) { alert('–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 2 —Ñ–∞–π–ª–∞.'); return; }

    const allowed = ['image/jpeg','image/png','image/gif','audio/mpeg'];
    for (const f of files) {
        if (!allowed.includes(f.type)) { alert('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø.'); return; }
        if (f.size > 5*1024*1024) { alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å 5MB).'); return; }
    }

    const toSave = { nickname, reviewText, date: firebase.firestore.FieldValue.serverTimestamp() };

    if (files.length === 0) {
        firebase.firestore().collection('reviews').add(toSave)
            .then(() => { document.getElementById('review-form').reset(); document.getElementById('send_sound').play(); })
            .catch(err => { console.error(err); alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.'); });
        return;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const uploads = files.map(file => {
        const fd = new FormData();
        fd.append('file', file);
        fd.append('upload_preset', UPLOAD_PRESET);
        return fetch(CLOUDINARY_URL, { method: 'POST', body: fd }).then(r => r.json());
    });

    Promise.all(uploads)
        .then(results => {
            const urls = results.map(r => r.secure_url).filter(Boolean);
            if (urls.length === 1) { toSave.mediaUrl = urls[0]; toSave.mediaUrls = urls; }
            else if (urls.length > 1) toSave.mediaUrls = urls;
            return firebase.firestore().collection('reviews').add(toSave);
        })
        .then(() => {
            document.getElementById('review-form').reset();
            document.getElementById('send_sound').play();
        })
        .catch(err => {
            console.error('Upload/Save error:', err);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤.');
        });
});

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤—ã (—Ä–µ–∞–ª—Ç–∞–π–º), —Å–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤ –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
window.addEventListener('load', function() {
    firebase.firestore().collection('reviews').orderBy('date', 'asc')
        .onSnapshot(snapshot => {
            const arr = [];
            snapshot.forEach(doc => arr.push(doc.data()));
            ALL_REVIEWS = arr;
            // –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –Ω–∞–¥–æ
            const totalPages = Math.max(1, Math.ceil(ALL_REVIEWS.length / PER_PAGE));
            if (currentPage > totalPages) currentPage = totalPages;
            renderPage(currentPage);
        }, err => console.error('Firestore read error:', err));
});
